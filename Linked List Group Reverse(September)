/*
class Node {
  public:
    int data;
    Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
class Solution {
  public:
    Node *reverseKGroup(Node *head, int k) {
        if(!head) return nullptr;
        
        Node* prev = nullptr; // initalize prev pointer 
        Node* curr = head; // start with the head of the list
        
        int count = 0; 
        Node* nextNode = nullptr;
        
        while(curr !=  nullptr && count<k){
            nextNode = curr->next;// store the next node
            curr-> next = prev; // reverse the current node's pointer
            prev = curr; // move the prev pointer forward
            curr = nextNode; //move the current pointer forward
        
            count++;
        }
         if(nextNode){
            head->next = reverseKGroup(nextNode,k);
         }
        return prev; // new head of the reversed list
    }
};
